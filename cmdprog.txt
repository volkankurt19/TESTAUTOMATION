package samplevlkn;

import java.io.File;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.By;
import jxl.write.WriteException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

public class Samplevlkn {
    private static String mapPath;
    private static String configPath;
    private static String doType;
    private static String uniqId;
    private static String uniqValue;
    private static Config config;
    private static HashMap<String, Uniq> uniqMap;
        
    public static void main(String[] args) {
        try{
            if(args.length > 0){
                getMapAndConfigPaths(args);

                readConfigFile();

                readMapFile();

                System.setProperty("webdriver.gecko.driver" , "C:\\Users\\User\\Desktop\\geckodriver.exe");
                WebDriver driver  = new FirefoxDriver();
                WebDriver.Timeouts pageLoadTimeout = driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
                WebDriverWait wait = new WebDriverWait(driver, 10);
                StringBuilder urlBuild = new StringBuilder("http://");
                urlBuild.append(config.getIp());
                String urlMain = urlBuild.toString();
                driver.navigate().to(urlMain);
                wait.until(ExpectedConditions.titleContains("AirTies"));
                Thread.sleep(15000);
             ... for(int i=0;i <uniqids.lenght ;i++){
                Uniq uniq = uniqMap.get(uniqId);

                StringBuilder pageUrlBuilder = new StringBuilder(urlMain);
                pageUrlBuilder.append("/");
                pageUrlBuilder.append(uniq.getPageLink());

                String pageLink = pageUrlBuilder.toString();
                String partialObject = uniq.getPartialObject();
                String pageObject = uniq.getPageObject();
                String objectType = uniq.getObjectType();
                String saveButton = uniq.getSaveButton();

                driver.navigate().to(pageLink);
                driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
                Thread.sleep(15000);

                driver.findElement(By.id(partialObject)).click();
                driver.manage().timeouts().pageLoadTimeout(2, TimeUnit.SECONDS);

                if(doType.equals("set")){
                    if(objectType.equals("txtbox")){
                        WebElement textbox = driver.findElement(By.id(pageObject));
                        textbox.clear();
                        textbox.sendKeys(uniqValue);

                    } else if(objectType.equals("combobox")){
                        Select combobox = new Select(driver.findElement(By.id(pageObject)));
                        combobox.selectByIndex(Integer.parseInt(uniqValue));
                    }

                    WebElement button = driver.findElement(By.id(saveButton));
                    button.click();

                } else if(doType.equals("get")){
                    String getValue = "";

                    if(objectType.equals("txtbox")){
                        WebElement textbox = driver.findElement(By.id(pageObject));
                        getValue = textbox.getAttribute("value");

                    } else if(objectType.equals("combobox")){
                        Select combobox = new Select(driver.findElement(By.id(pageObject)));
                        getValue = combobox.getFirstSelectedOption().getText();
                    }

                    System.out.print("Get Value: " + getValue);
                }

         }...
            } else {
                System.out.println("No args");
            }
        } catch(Exception ex){
            ex.printStackTrace();
        } 

}
    
    private static void getMapAndConfigPaths(String args[]){
        for(int i = 0; i < args.length; i++){
            String arg = args[i];
            
            String key = arg.split("=")[0];
            String value = arg.split("=")[1];
            
            if(key.equals("-map")){
                mapPath = value;
            } else if(key.equals("-config")){
                configPath = value;
            } else if(key.equals("-do")){
                String d = value;
                doType = value.split(":")[0];
                uniqValue = value.split(":")[1];
            } else if(key.equals("-id")){
                 uniqId = value;
                 
            }
        }
        
        
        System.out.println(String.format("map: %s, config: %s, doType: %s, uniqValue: %s, uniqId: %s", 
                mapPath, configPath, doType, uniqValue, uniqId));
    }
    
    private static void readConfigFile(){
        String ip = "";
        String username = "";
        String password = "";
        List<String> lines;
        
        try {
            lines = Files.readAllLines(Paths.get(configPath));
            for(String line : lines){
                String key = line.split("=")[0];
                String value = line.split("=")[1];

                if(key.equals("IP")){
                    ip = value;
                }else if(key.equals("USERNAME")){
                    username = value;
                } else if(key.equals("PASSWORD")){
                    password = value;     
                }
            }
        
            config = new Config(ip, username, password);
        
        } catch (IOException ex) {
            Logger.getLogger(Samplevlkn.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        System.out.println(String.format("ip: %s, username: %s, password: %s", ip, username, password));
    }
    
    private static void readMapFile(){
        try{
            File file = new File(mapPath);
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            documentBuilderFactory.setNamespaceAware(true);       
            //documentBuilderFactory.setValidating(true);          
            documentBuilderFactory.setIgnoringElementContentWhitespace(true); 
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            Document document = documentBuilder.parse(file);
            document.getDocumentElement().normalize();
            
            uniqMap = new HashMap<>();
            NodeList nodeList = document.getElementsByTagName("Uniq");
            System.out.println("Nodes length: " + nodeList.getLength());
            
            for(int i = 0; i < nodeList.getLength(); i++){
                Element element = (Element) nodeList.item(i);
                String id = element.getAttribute("id");
                String information = element.getElementsByTagName("Information").item(0).getTextContent();
                String pageLink = element.getElementsByTagName("PageLink").item(0).getTextContent();
                String partialObject = element.getElementsByTagName("PartialObject").item(0).getTextContent();
                String pageObject = element.getElementsByTagName("PageObject").item(0).getTextContent();
                String objectType = element.getElementsByTagName("ObjectType").item(0).getTextContent();
                String saveButton = element.getElementsByTagName("SaveButton").item(0).getTextContent();
                
                Uniq uniq = new Uniq(id, information, pageLink, partialObject, pageObject, objectType, saveButton);
                
                System.out.println(String.format("id: %s, information: %s, pageLink: %s, partialObject: %s, pageObject: %s, objectType: %s, saveButton: %s",
                        id, information, pageLink, partialObject, pageObject, objectType, saveButton));
                
                
                uniqMap.put(id, uniq);
            }
        }catch(Exception ex){
            
            ex.printStackTrace();
        }
    }
}
    
    

    
    
    
              
                
                   
   

      
    

           